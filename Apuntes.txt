Comandos

Cuando volvemos a trabajar de cierto tiempo 
- git pull origin develop  -> actualizamos la ultima versión

- git checkout -b feature-#1-nombreRama
- git add .
- git commit -m "primera version"
- git push origin feature-#1-reserva -> subiendo desde mi rama

Una ves subido las tareas
- git checkout develop -> salimos de nuestra rama 



para trabajar de nuevo, hacemos pull y entramos a nuestra rama



Configurar el repositorio
Crear tareas en Issues.

En manage crear labels como Backlog y To Do y Doing y Review y Done

Después entramos a plan
  - Issue boards -> creamos nuevas listas con los labels que creamos
  en orden, backlog, to do, Doing, Review, Done 

Una vez suban al repositorio, yo como creador del repositroio voy a manage-request para aceptar lo subido, primero el que subio debe dar create merge request solicitando a que se una al repositorio.

- Después apruebo y elimino la rama local
después vamos al repositorio a ver los cambios

Detalles, podemos modificar los labels.





¿Qué es la arquitectura de software?
¿Qué son los patrones de diseño?
¿Qué son los principios SOLID?
¿Qué es el principio de inversión de dependencias?
¿Qué es el principio abierto-cerrado?
¿Cuáles son los pilares de Scrum y en qué consisten?
¿Cuáles son las preguntas que debe hacerse el equipo en el Daily Scrum?
¿Cuáles son las características del equipo de Scrum?
¿Cuál es la función del Product Owner en el equipo?
¿Qué es el ROI?
¿Qué es el backlog?
El Product Owner es el dueño del producto (V/F).
Stakeholders.


PARTE TEORICA DE COM350



1. ¿Qué es la arquitectura de software?

La arquitectura de software es la estructura fundamental de un sistema, que comprende los componentes principales, sus relaciones entre sí y su entorno. Define cómo interactúan los diferentes elementos y proporciona una base para las decisiones de diseño, la escalabilidad y el mantenimiento del software.

2. ¿Qué son los patrones de diseño?

Los patrones de diseño son soluciones generales reutilizables a problemas comunes que ocurren en el diseño de software. Estos patrones ofrecen una forma estandarizada de resolver problemas recurrentes en el desarrollo, lo que mejora la eficiencia y la mantenibilidad del código.

3. ¿Qué son los principios SOLID?

Los principios SOLID son cinco guías de diseño de software orientado a objetos que promueven la creación de software más flexible, mantenible y escalable:

S: Single Responsibility Principle (Principio de Responsabilidad Única).
O: Open/Closed Principle (Principio Abierto/Cerrado).
L: Liskov Substitution Principle (Principio de Sustitución de Liskov).
I: Interface Segregation Principle (Principio de Segregación de Interfaces).
D: Dependency Inversion Principle (Principio de Inversión de Dependencias).


4. ¿Qué es el principio de inversión de dependencias?

Este principio establece que los módulos de alto nivel no deben depender de los de bajo nivel, sino de abstracciones. Las abstracciones no deben depender de detalles, sino que los detalles deben depender de abstracciones. Esto se traduce en que las dependencias deben invertirse para reducir el acoplamiento y mejorar la flexibilidad del sistema.

5. ¿Qué es el principio abierto-cerrado?
El principio abierto-cerrado indica que el software debe estar abierto para extensión, pero cerrado para modificación. Es decir, deberíamos poder agregar nuevas funcionalidades sin alterar el código existente, lo que ayuda a evitar la introducción de errores en sistemas ya en producción.


6. ¿Cuáles son los pilares de Scrum y en qué consisten?
Scrum se basa en tres pilares:

- Transparencia: Todos los aspectos del proceso de desarrollo deben ser visibles para todos los involucrados, lo que garantiza decisiones basadas en hechos.
- Inspección: Los artefactos de Scrum y el progreso deben ser inspeccionados regularmente para identificar problemas o desviaciones.
- Adaptación: Si algo en el proceso no es conforme con lo esperado, el equipo debe ajustar sus métodos para minimizar el impacto.


7. ¿Cuáles son las preguntas que debe hacerse el equipo en el Daily Scrum?
Durante el Daily Scrum, el equipo de desarrollo responde tres preguntas clave:

- ¿Qué hice ayer que ayudó al equipo a alcanzar el objetivo del Sprint?
- ¿Qué voy a hacer hoy para ayudar al equipo a alcanzar el objetivo del Sprint?
- ¿Hay algún impedimento que esté bloqueando mi progreso?


8. ¿Cuáles son las características del equipo de Scrum?
El equipo de Scrum es:

- Multifuncional: Todos los miembros tienen las habilidades necesarias para completar el trabajo sin depender de externos.
- Autogestionado: El equipo decide internamente quién hace qué, cuándo y cómo.
- Pequeño pero eficiente: Generalmente de 10 personas o menos para facilitar la comunicación y la agilidad.


9. ¿Cuál es la función del Product Owner en el equipo?

El Product Owner es responsable de maximizar el valor del producto desarrollado por el equipo. Administra el Product Backlog, prioriza las tareas y actúa como el puente entre el equipo de desarrollo y los stakeholders, asegurando que se trabajen las características de mayor valor.


10. ¿Qué es el ROI?

ROI significa Return on Investment (Retorno sobre la Inversión). Es una métrica que evalúa la eficiencia de una inversión, calculando el beneficio o retorno en relación con el costo de inversión. En desarrollo de software, se utiliza para medir el valor generado en comparación con los recursos invertidos.

11. ¿Qué es el backlog?

El backlog es una lista priorizada de tareas, funcionalidades o mejoras pendientes por desarrollar. En Scrum, se distingue entre:

- Product Backlog: Contiene todo el trabajo necesario para mejorar el producto.
- Sprint Backlog: Subconjunto del Product Backlog que se selecciona para trabajar durante un Sprint.


12. El Product Owner es el dueño del producto (V/F).

Verdadero. El Product Owner es el responsable de maximizar el valor del producto y gestiona el Product Backlog para asegurar que se desarrollen las características más valiosas.

13. Stakeholders

Los stakeholders son todas las personas u organizaciones interesadas o afectadas por el proyecto o el producto. En Scrum, incluyen tanto a los clientes como a los usuarios finales, así como a cualquier otra persona que tenga un interés en el éxito del producto.





Comando para instalar un proyecto de Laravel
dentro de un directorio especifico
- composer create-project --prefer-dist laravel/laravel nombreProyecto

Para hacer correr el servidor 
- php artisan serve



Conceptos que se vio:
1. Migraciones
2. Archivos blade para direcciones


Ver archivos como:
- UserFactory.php
- AgendaFactory
- AgendaSeeder







# COMANDOS PARA GIT LAB 
# 1. Antes de todo hacemos pull del repositorio de develop
- git pull origin develop
# 2. Creamos una rama para trabajar o escribir codigo 
- git checkout -b feature-#1-nombreRama
# 3. Una ves terminado subimos los cambios desde la rama al develop
- git add .
- git commit -m "comentario"
- git push origin feature-#nro-nombreRama
# 4. Una ves subido entramos al link que nos genera el git para solicitar los cambios 
# 5. Una ves que se hayan aceptado o subido los cambios debemos salir de la rama 
- git checkout develop
# 6. Por ultimo debemos actualizar el repositorio desde el develop
- git pull origin develop


# OTROS EXTRAS
# Para buscar las ramas creadas 
- git branch
# Para entrar a una rama existente
- git checkout feature-#1-nombreRama    



Para que haya seguimiento de los microservicios deben tener los lojs 


En JavaScript
  Call back
  Promesas
  Async Await



DOCKER e una plantilla de software para levantar aplicaciones sin problemas.
Se crear a partir de un archivo  docker file

- Imágenes 
- Contenedores


Con el docker file se crea la imagen
Docker Hub es un almacen de imágenes


COMANDOS PARA DOCKER:
- docker run hello-world

Crear un archivo sin extension para escribir el código.

Para crear imagen
- docker build -t holamundo.php .
- docker build -t holamundo.python .

Ejemplo:
- docker build -t Service-Users .

Para ferificar si los puertos están en función
telnet localhost 3000


En un proyecto de microservicio
Tener el archivo dockerFile con el código
Iniciar docker build -t service-users .  para agregar la version :1.0
Revisar el images en Docker
Hacer correr para generar el COntenedor
Al seleccionar el contenedor si es necesario colocar el puerto en el form